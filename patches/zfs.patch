diff --git a/src/pcp/htop/GNUmakefile b/src/pcp/htop/GNUmakefile
index 5d0596705..6669470aa 100644
--- a/src/pcp/htop/GNUmakefile
+++ b/src/pcp/htop/GNUmakefile
@@ -75,6 +75,9 @@ CFILES = \
 	XUtils.c \
 	linux/PressureStallMeter.c \
 	linux/ZramMeter.c \
+	zfs/ZfsArcMeter.c \
+	zfs/ZfsArcStats.c \
+	zfs/ZfsCompressedArcMeter.c \
 	pcp/PCPProcess.c \
 	pcp/PCPProcessList.c \
 	pcp/Platform.c
@@ -134,6 +137,9 @@ HFILES = \
 	linux/PressureStallMeter.h \
 	linux/ZramMeter.h \
 	linux/ZramStats.h \
+	zfs/ZfsArcMeter.h \
+	zfs/ZfsArcStats.h \
+	zfs/ZfsCompressedArcMeter.h \
 	pcp/PCPProcess.h \
 	pcp/PCPProcessList.h \
 	pcp/Platform.h \
diff --git a/src/pcp/htop/pcp/PCPProcessList.c b/src/pcp/htop/pcp/PCPProcessList.c
index 54c9b818b..7c1aa8a72 100644
--- a/src/pcp/htop/pcp/PCPProcessList.c
+++ b/src/pcp/htop/pcp/PCPProcessList.c
@@ -13,6 +13,36 @@ in the source distribution for its full text.
 
 #include <math.h>
 
+
+#include <assert.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <math.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/time.h>
+#include <sys/types.h>
+
+#ifdef HAVE_DELAYACCT
+#include <linux/netlink.h>
+#include <linux/taskstats.h>
+#include <netlink/attr.h>
+#include <netlink/handlers.h>
+#include <netlink/msg.h>
+#include <netlink/netlink.h>
+#include <netlink/socket.h>
+#include <netlink/genl/genl.h>
+#include <netlink/genl/ctrl.h>
+#endif
+
 #include "CRT.h"
 #include "Macros.h"
 #include "Object.h"
@@ -733,6 +763,46 @@ static void PCPProcessList_updateHeader(ProcessList* super, const Settings* sett
       PCPProcessList_updatePerCPUReal(this, PCP_HINV_CPUCLOCK, CPU_FREQUENCY);
 }
 
+static inline void PCPProcessList_scanZfsArcstats(PCPProcessList* lpl) {
+   pmAtomValue value,
+               comp,
+               uncomp,
+               dbufSize,
+               dnodeSize,
+               bonusSize;
+
+
+   if (Metric_values(PCP_ZFS_ARC_ANON_SIZE, &value, 1, PM_TYPE_U64))
+      lpl->zfs.anon = value.ull / 1024;
+   if (Metric_values(PCP_ZFS_ARC_C_MAX, &value, 1, PM_TYPE_U64))
+      lpl->zfs.max = value.ull / 1024;
+
+   if (Metric_values(PCP_ZFS_ARC_BONUS_SIZE, &bonusSize, 1, PM_TYPE_U64))
+   if (Metric_values(PCP_ZFS_ARC_DBUF_SIZE, &dbufSize, 1, PM_TYPE_U64))
+   if (Metric_values(PCP_ZFS_ARC_DNODE_SIZE, &dnodeSize, 1, PM_TYPE_U64))
+
+   if (Metric_values(PCP_ZFS_ARC_COMPRESSED_SIZE, &comp, 1, PM_TYPE_U64))
+   if (Metric_values(PCP_ZFS_ARC_UNCOMPRESSED_SIZE, &uncomp, 1, PM_TYPE_U64))
+
+   if (Metric_values(PCP_ZFS_ARC_HDR_SIZE, &value, 1, PM_TYPE_U64))
+      lpl->zfs.header = value.ull / 1024;
+   if (Metric_values(PCP_ZFS_ARC_MFU_SIZE, &value, 1, PM_TYPE_U64))
+      lpl->zfs.MFU = value.ull / 1024;
+   if (Metric_values(PCP_ZFS_ARC_MRU_SIZE, &value, 1, PM_TYPE_U64))
+      lpl->zfs.MRU = value.ull / 1024;
+   if (Metric_values(PCP_ZFS_ARC_SIZE, &value, 1, PM_TYPE_U64)) {
+      lpl->zfs.size = value.ull / 1024;
+   }
+
+   lpl->zfs.enabled = (lpl->zfs.size > 0 ? 1 : 0);
+   lpl->zfs.other   = (dbufSize.ull + dnodeSize.ull + bonusSize.ull) / 1024;
+   lpl->zfs.isCompressed = 1;
+   if ( lpl->zfs.isCompressed ) {
+      lpl->zfs.compressed =  comp.ull /1024;
+      lpl->zfs.uncompressed = uncomp.ull /1024;
+   }
+}
+
 void ProcessList_goThroughEntries(ProcessList* super, bool pauseProcessUpdate) {
    PCPProcessList* this = (PCPProcessList*) super;
    const Settings* settings = super->settings;
@@ -769,6 +839,7 @@ void ProcessList_goThroughEntries(ProcessList* super, bool pauseProcessUpdate) {
    this->timestamp = pmtimevalToReal(&timestamp);
 
    PCPProcessList_updateHeader(super, settings);
+   PCPProcessList_scanZfsArcstats(this);
 
    /* In pause mode only update global data for meters (CPU, memory, etc) */
    if (pauseProcessUpdate)
diff --git a/src/pcp/htop/pcp/PCPProcessList.h b/src/pcp/htop/pcp/PCPProcessList.h
index 28f1d9cee..70ddfb755 100644
--- a/src/pcp/htop/pcp/PCPProcessList.h
+++ b/src/pcp/htop/pcp/PCPProcessList.h
@@ -16,6 +16,7 @@ in the source distribution for its full text.
 #include "ProcessList.h"
 #include "pcp/Platform.h"
 #include "UsersTable.h"
+#include "zfs/ZfsArcStats.h"
 
 typedef enum CPUMetric_ {
    CPU_TOTAL_TIME,
@@ -57,6 +58,7 @@ typedef struct PCPProcessList_ {
    pmAtomValue* cpu;		/* aggregate values for each metric */
    pmAtomValue** percpu;	/* per-processor values for each metric */
    pmAtomValue* values;		/* per-processor buffer for just one metric */
+   ZfsArcStats zfs;
 } PCPProcessList;
 
 ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidMatchList, uid_t userId);
diff --git a/src/pcp/htop/pcp/Platform.c b/src/pcp/htop/pcp/Platform.c
index f7b300550..12c8ce737 100644
--- a/src/pcp/htop/pcp/Platform.c
+++ b/src/pcp/htop/pcp/Platform.c
@@ -39,11 +39,15 @@ in the source distribution for its full text.
 #include "TasksMeter.h"
 #include "UptimeMeter.h"
 #include "XUtils.h"
-
 #include "linux/PressureStallMeter.h"
 #include "linux/ZramMeter.h"
 #include "linux/ZramStats.h"
 
+
+#include "zfs/ZfsArcMeter.h"
+#include "zfs/ZfsArcStats.h"
+#include "zfs/ZfsCompressedArcMeter.h"
+
 typedef struct Platform_ {
    int context;			/* PMAPI(3) context identifier */
    unsigned int total;		/* total number of all metrics */
@@ -102,6 +106,8 @@ const MeterClass* const Platform_meterTypes[] = {
    &PressureStallIOFullMeter_class,
    &PressureStallMemorySomeMeter_class,
    &PressureStallMemoryFullMeter_class,
+   &ZfsArcMeter_class,
+   &ZfsCompressedArcMeter_class,
    &ZramMeter_class,
    &DiskIOMeter_class,
    &NetworkIOMeter_class,
@@ -164,6 +170,18 @@ static const char *Platform_metricNames[] = {
    [PCP_PSI_MEMSOME] = "kernel.all.pressure.memory.some.avg",
    [PCP_PSI_MEMFULL] = "kernel.all.pressure.memory.full.avg",
 
+   [PCP_ZFS_ARC_ANON_SIZE] = "zfs.arc.anon_size",
+   [PCP_ZFS_ARC_BONUS_SIZE] = "zfs.arc.bonus_size",
+   [PCP_ZFS_ARC_COMPRESSED_SIZE] = "zfs.arc.compressed_size",
+   [PCP_ZFS_ARC_UNCOMPRESSED_SIZE] = "zfs.arc.uncompressed_size",
+   [PCP_ZFS_ARC_C_MAX] = "zfs.arc.c_max",
+   [PCP_ZFS_ARC_DBUF_SIZE] = "zfs.arc.dbuf_size",
+   [PCP_ZFS_ARC_DNODE_SIZE] = "zfs.arc.dnode_size",
+   [PCP_ZFS_ARC_HDR_SIZE] = "zfs.arc.hdr_size",
+   [PCP_ZFS_ARC_MFU_SIZE] = "zfs.arc.mfu.size",
+   [PCP_ZFS_ARC_MRU_SIZE] = "zfs.arc.mru.size",
+   [PCP_ZFS_ARC_SIZE] = "zfs.arc.size",
+
    [PCP_ZRAM_CAPACITY] = "zram.capacity",
    [PCP_ZRAM_ORIGINAL] = "zram.mm_stat.data_size.original",
    [PCP_ZRAM_COMPRESSED] = "zram.mm_stat.data_size.compressed",
@@ -569,6 +587,7 @@ double Platform_setCPUValues(Meter* this, int cpu) {
 
 void Platform_setMemoryValues(Meter* this) {
    const ProcessList* pl = this->pl;
+   const PCPProcessList* lpl = (const PCPProcessList*) pl;
    long int usedMem = pl->usedMem;
    long int buffersMem = pl->buffersMem;
    long int cachedMem = pl->cachedMem;
@@ -577,6 +596,11 @@ void Platform_setMemoryValues(Meter* this) {
    this->values[0] = usedMem;
    this->values[1] = buffersMem;
    this->values[2] = cachedMem;
+
+   if (lpl->zfs.enabled != 0) {
+      this->values[0] -= lpl->zfs.size;
+      this->values[2] += lpl->zfs.size;
+   }
 }
 
 void Platform_setSwapValues(Meter* this) {
@@ -613,6 +637,18 @@ void Platform_setZramValues(Meter* this) {
    this->values[1] = stats.usedZramOrig;
 }
 
+void Platform_setZfsArcValues(Meter* this) {
+   PCPProcessList* lpl = (PCPProcessList*) this->pl;
+
+   ZfsArcMeter_readStats(this, &(lpl->zfs));
+}
+
+void Platform_setZfsCompressedArcValues(Meter* this) {
+   PCPProcessList* lpl = (PCPProcessList*) this->pl;
+
+   ZfsCompressedArcMeter_readStats(this, &(lpl->zfs));
+}
+
 void Platform_getSysArch(SysArchInfo *data) {
    if (data) {
       /* constant, use previously-sampled values */
diff --git a/src/pcp/htop/pcp/Platform.h b/src/pcp/htop/pcp/Platform.h
index 82fa0b352..56b724800 100644
--- a/src/pcp/htop/pcp/Platform.h
+++ b/src/pcp/htop/pcp/Platform.h
@@ -62,6 +62,10 @@ void Platform_setSwapValues(Meter* this);
 
 void Platform_setZramValues(Meter* this);
 
+void Platform_setZfsArcValues(Meter* this);
+
+void Platform_setZfsCompressedArcValues(Meter* this);
+
 void Platform_getSysArch(SysArchInfo* data);
 
 char* Platform_getProcessEnv(pid_t pid);
@@ -134,6 +138,17 @@ typedef enum Metric_ {
    PCP_PSI_IOFULL,		/* kernel.all.pressure.io.full.avg */
    PCP_PSI_MEMSOME,		/* kernel.all.pressure.memory.some.avg */
    PCP_PSI_MEMFULL,		/* kernel.all.pressure.memory.full.avg */
+   PCP_ZFS_ARC_ANON_SIZE,        /* zfs.arc.anon_size */
+   PCP_ZFS_ARC_BONUS_SIZE,       /* zfs.arc.bonus_size */
+   PCP_ZFS_ARC_COMPRESSED_SIZE,  /* zfs.arc.compressed_size */
+   PCP_ZFS_ARC_UNCOMPRESSED_SIZE,  /* zfs.arc.uncompressed_size */
+   PCP_ZFS_ARC_C_MAX,            /* zfs.arc.c_max */
+   PCP_ZFS_ARC_DBUF_SIZE,        /* zfs.arc.dbuf_size */
+   PCP_ZFS_ARC_DNODE_SIZE,       /* zfs.arc.dnode_size */
+   PCP_ZFS_ARC_HDR_SIZE,         /* zfs.arc.hdr_size */
+   PCP_ZFS_ARC_MFU_SIZE,         /* zfs.arc.mfu_size */
+   PCP_ZFS_ARC_MRU_SIZE,         /* zfs.arc.mru_size */
+   PCP_ZFS_ARC_SIZE,             /* zfs.arc.size */
    PCP_ZRAM_CAPACITY,		/* zram.capacity */
    PCP_ZRAM_ORIGINAL,		/* zram.mm_stat.data_size.original */
    PCP_ZRAM_COMPRESSED,		/* zram.mm_stat.data_size.compressed */
