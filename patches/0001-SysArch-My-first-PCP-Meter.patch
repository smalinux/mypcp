From df14b7fb28006f19823e4cfac0c9d132ac514e6d Mon Sep 17 00:00:00 2001
From: Sohaib <sohaib.amhmd@gmail.com>
Date: Thu, 11 Feb 2021 04:46:04 +0200
Subject: [PATCH] SysArch: My first PCP Meter

---
 src/pcp/htop/GNUmakefile          |  2 ++
 src/pcp/htop/Meter.h              |  3 ++
 src/pcp/htop/ProcessList.h        |  4 +++
 src/pcp/htop/SysArchMeter.c       | 47 +++++++++++++++++++++++++++++++
 src/pcp/htop/SysArchMeter.h       | 14 +++++++++
 src/pcp/htop/pcp/PCPProcessList.c | 13 +++++++++
 src/pcp/htop/pcp/Platform.c       | 13 +++++++++
 src/pcp/htop/pcp/Platform.h       |  5 ++++
 8 files changed, 101 insertions(+)
 create mode 100644 src/pcp/htop/SysArchMeter.c
 create mode 100644 src/pcp/htop/SysArchMeter.h

diff --git a/src/pcp/htop/GNUmakefile b/src/pcp/htop/GNUmakefile
index 59f1e9592..3a8fa94f7 100644
--- a/src/pcp/htop/GNUmakefile
+++ b/src/pcp/htop/GNUmakefile
@@ -65,6 +65,7 @@ CFILES = \
 	ScreenManager.c \
 	Settings.c \
 	SignalsPanel.c \
+	SysArchMeter.c \
 	SwapMeter.c \
 	TasksMeter.c \
 	TraceScreen.c \
@@ -122,6 +123,7 @@ HFILES = \
 	ScreenManager.h \
 	Settings.h \
 	SignalsPanel.h \
+	SysArchMeter.h \
 	SwapMeter.h \
 	TasksMeter.h \
 	TraceScreen.h \
diff --git a/src/pcp/htop/Meter.h b/src/pcp/htop/Meter.h
index cb0540571..7305f60f9 100644
--- a/src/pcp/htop/Meter.h
+++ b/src/pcp/htop/Meter.h
@@ -103,6 +103,9 @@ struct Meter_ {
    double* values;
    double total;
    void* meterData;
+   char* SysArchName;
+   char* SysArchRelease;
+   char* SysArchMachine;
 };
 
 typedef struct MeterMode_ {
diff --git a/src/pcp/htop/ProcessList.h b/src/pcp/htop/ProcessList.h
index b7ae40062..c8d8c4c29 100644
--- a/src/pcp/htop/ProcessList.h
+++ b/src/pcp/htop/ProcessList.h
@@ -69,6 +69,10 @@ typedef struct ProcessList_ {
    unsigned long long int usedSwap;
    unsigned long long int freeSwap;
 
+   char* SysArchName;
+   char* SysArchRelease;
+   char* SysArchMachine;
+
    int cpuCount;
 
    time_t scanTs;
diff --git a/src/pcp/htop/SysArchMeter.c b/src/pcp/htop/SysArchMeter.c
new file mode 100644
index 000000000..db801714a
--- /dev/null
+++ b/src/pcp/htop/SysArchMeter.c
@@ -0,0 +1,47 @@
+/*
+htop - SysArchMeter.c
+(C) 2021 htop dev team
+Released under the GNU GPLv2, see the COPYING file
+in the source distribution for its full text.
+*/
+#include "config.h"  // IWYU pragma: keep
+
+#include "SysArchMeter.h"
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/utsname.h>
+
+#include "CRT.h"
+#include "Macros.h"
+#include "Object.h"
+#include "Platform.h"
+#include "RichString.h"
+#include "XUtils.h"
+
+static const int SysArchMeter_attributes[] = {HOSTNAME};
+
+static void SysArchMeter_updateValues(Meter* this, char* buffer, size_t size) {
+   Platform_setSysArch(this);
+
+
+    snprintf(buffer, size, "%s %s [%s]", 
+            this->SysArchName,
+            this->SysArchRelease,
+            this->SysArchMachine);
+}
+
+const MeterClass SysArchMeter_class = {
+   .super = {
+      .extends = Class(Meter),
+      .delete = Meter_delete
+   },
+   .updateValues = SysArchMeter_updateValues,
+   .defaultMode = TEXT_METERMODE,
+   .maxItems = 0,
+   .total = 100.0,
+   .attributes = SysArchMeter_attributes,
+   .name = "System",
+   .uiName = "System",
+   .caption = "System: ",
+};
diff --git a/src/pcp/htop/SysArchMeter.h b/src/pcp/htop/SysArchMeter.h
new file mode 100644
index 000000000..fa6adfe3c
--- /dev/null
+++ b/src/pcp/htop/SysArchMeter.h
@@ -0,0 +1,14 @@
+#ifndef HEADER_SysArchMeter
+#define HEADER_SysArchMeter
+/*
+htop - SysArchMeter.h
+(C) 2021 htop dev team
+Released under the GNU GPLv2, see the COPYING file
+in the source distribution for its full text.
+*/
+#include "Meter.h"
+
+
+extern const MeterClass SysArchMeter_class;
+
+#endif
diff --git a/src/pcp/htop/pcp/PCPProcessList.c b/src/pcp/htop/pcp/PCPProcessList.c
index 11d708af4..663618b93 100644
--- a/src/pcp/htop/pcp/PCPProcessList.c
+++ b/src/pcp/htop/pcp/PCPProcessList.c
@@ -553,6 +553,17 @@ static void PCPProcessList_updateMemoryInfo(ProcessList* super) {
       super->totalSwap = value.ull / 1024;
 }
 
+static void PCPProcessList_updateSysArch(ProcessList* super) {
+   pmAtomValue value;
+
+   if (Metric_values(KERNEL_UNAME_SYSNAME, &value, 1, PM_TYPE_STRING) != NULL)
+      super->SysArchName = value.cp;
+   if (Metric_values(KERNEL_UNAME_RELEASE, &value, 1, PM_TYPE_STRING) != NULL)
+      super->SysArchRelease = value.cp;
+   if (Metric_values(KERNEL_UNAME_MACHINE, &value, 1, PM_TYPE_STRING) != NULL)
+      super->SysArchMachine = value.cp;
+}
+
 /* make copies of previously sampled values to avoid overwrite */
 static inline void PCPProcessList_backupCPUTime(pmAtomValue* values) {
    /* the PERIOD fields (must) mirror the TIME fields */
@@ -679,6 +690,8 @@ static void PCPProcessList_updateHeader(ProcessList* super, const Settings* sett
 
    if (settings->showCPUFrequency)
       PCPProcessList_updatePerCPUReal(this, PCP_HINV_CPUCLOCK, CPU_FREQUENCY);
+
+    PCPProcessList_updateSysArch(super);
 }
 
 void ProcessList_goThroughEntries(ProcessList* super, bool pauseProcessUpdate) {
diff --git a/src/pcp/htop/pcp/Platform.c b/src/pcp/htop/pcp/Platform.c
index e70ba5d1d..c1d2504e1 100644
--- a/src/pcp/htop/pcp/Platform.c
+++ b/src/pcp/htop/pcp/Platform.c
@@ -12,6 +12,7 @@ in the source distribution for its full text.
 
 #include <math.h>
 
+#include "SysArchMeter.h"
 #include "BatteryMeter.h"
 #include "ClockMeter.h"
 #include "Compat.h"
@@ -90,6 +91,7 @@ const MeterClass* const Platform_meterTypes[] = {
    &LeftCPUs8Meter_class,
    &RightCPUs8Meter_class,
    &BlankMeter_class,
+   &SysArchMeter_class,
    &PressureStallCPUSomeMeter_class,
    &PressureStallIOSomeMeter_class,
    &PressureStallIOFullMeter_class,
@@ -209,6 +211,10 @@ static const char *Platform_metricNames[] = {
    [PCP_PROC_SMAPS_SWAP] = "proc.smaps.swap",
    [PCP_PROC_SMAPS_SWAPPSS] = "proc.smaps.swappss",
 
+   [KERNEL_UNAME_SYSNAME] = "kernel.uname.sysname",
+   [KERNEL_UNAME_RELEASE] = "kernel.uname.release",
+   [KERNEL_UNAME_MACHINE] = "kernel.uname.machine",
+
    [PCP_METRIC_COUNT] = NULL
 };
 
@@ -534,6 +540,13 @@ void Platform_setSwapValues(Meter* this) {
    this->values[0] = pl->usedSwap;
 }
 
+void Platform_setSysArch(Meter* this) {
+   const ProcessList* pl = this->pl;
+   this->SysArchName    = pl->SysArchName;
+   this->SysArchRelease = pl->SysArchRelease;
+   this->SysArchMachine = pl->SysArchMachine;
+}
+
 void Platform_setZramValues(Meter* this) {
    (void)this;
 
diff --git a/src/pcp/htop/pcp/Platform.h b/src/pcp/htop/pcp/Platform.h
index 62d28e728..597820509 100644
--- a/src/pcp/htop/pcp/Platform.h
+++ b/src/pcp/htop/pcp/Platform.h
@@ -53,6 +53,7 @@ double Platform_setCPUValues(Meter* this, int cpu);
 void Platform_setMemoryValues(Meter* this);
 
 void Platform_setSwapValues(Meter* this);
+void Platform_setSysArch(Meter* this);
 
 void Platform_setZramValues(Meter* this);
 
@@ -184,6 +185,10 @@ typedef enum Metric_ {
 
    PCP_PROC_RSS,            /* proc.psinfo.rss */
 
+   KERNEL_UNAME_SYSNAME,    /* kernel.uname.sysname */
+   KERNEL_UNAME_RELEASE,    /* kernel.uname.release */
+   KERNEL_UNAME_MACHINE,    /* kernel.uname.machine */
+
    PCP_METRIC_COUNT		/* total metric count */
 } Metric;
 
-- 
2.26.2

