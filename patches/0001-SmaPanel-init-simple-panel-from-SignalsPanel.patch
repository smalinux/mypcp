From 20c3788c1cb9d012955aada170259cde5a48022b Mon Sep 17 00:00:00 2001
From: Sohaib <sohaib.amhmd@gmail.com>
Date: Sun, 7 Feb 2021 22:41:57 +0200
Subject: [PATCH] SmaPanel: init simple panel from SignalsPanel

'z' key connected to this Panel.
---
 Action.c         | 18 ++++++++++++++++++
 SmaPanel.c       | 49 ++++++++++++++++++++++++++++++++++++++++++++++++
 SmaPanel.h       | 19 +++++++++++++++++++
 linux/Platform.h |  1 +
 4 files changed, 87 insertions(+)
 create mode 100644 SmaPanel.c
 create mode 100644 SmaPanel.h

diff --git a/Action.c b/Action.c
index 0ca9a8b..e63308e 100644
--- a/Action.c
+++ b/Action.c
@@ -30,6 +30,7 @@ in the source distribution for its full text.
 #include "ProvideCurses.h"
 #include "ScreenManager.h"
 #include "SignalsPanel.h"
+#include "SmaPanel.h"
 #include "TraceScreen.h"
 #include "Vector.h"
 #include "XUtils.h"
@@ -332,6 +333,22 @@ static Htop_Reaction actionKill(State* st) {
    return HTOP_REFRESH | HTOP_REDRAW_BAR | HTOP_UPDATE_PANELHDR;
 }
 
+static Htop_Reaction actionsma(State* st) {
+   Panel* SmaPanel = SmaPanel_new();
+   const ListItem* sgn = (ListItem*) Action_pickFromVector(st, SmaPanel, 15, true);
+   if (sgn) {
+      if (sgn->key != 0) {
+         Panel_setHeader((Panel*)st->mainPanel, "cSending...");
+         Panel_draw((Panel*)st->mainPanel, false, true, true, State_hideFunctionBar(st));
+         refresh();
+         MainPanel_foreachProcess(st->mainPanel, Process_sendSignal, (Arg) { .i = sgn->key }, NULL);
+         napms(500);
+      }
+   }
+   Panel_delete((Object*)SmaPanel);
+   return HTOP_REFRESH | HTOP_REDRAW_BAR | HTOP_UPDATE_PANELHDR;
+}
+
 static Htop_Reaction actionFilterByUser(State* st) {
    Panel* usersPanel = Panel_new(0, 0, 0, 0, Class(ListItem), true, FunctionBar_newEnterEsc("Show   ", "Cancel "));
    Panel_setHeader(usersPanel, "Show processes of:");
@@ -655,6 +672,7 @@ void Action_setBindings(Htop_Action* keys) {
    keys['e'] = actionShowEnvScreen;
    keys['h'] = actionHelp;
    keys['k'] = actionKill;
+   keys['z'] = actionsma;
    keys['l'] = actionLsof;
    keys['m'] = actionToggleMergedCommand;
    keys['p'] = actionToggleProgramPath;
diff --git a/SmaPanel.c b/SmaPanel.c
new file mode 100644
index 0000000..866b559
--- /dev/null
+++ b/SmaPanel.c
@@ -0,0 +1,49 @@
+/*
+htop - SignalsPanel.c
+(C) 2004-2011 Hisham H. Muhammad
+Released under the GNU GPLv2, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#include "SmaPanel.h"
+
+#include <signal.h>
+#include <stdbool.h>
+
+#include "FunctionBar.h"
+#include "ListItem.h"
+#include "Object.h"
+#include "Panel.h"
+#include "Platform.h"
+#include "XUtils.h"
+
+
+Panel* SmaPanel_new() {
+   Panel* this = Panel_new(1, 1, 1, 1, Class(ListItem), true, FunctionBar_newEnterEsc("SSend   ", "Cancel "));
+   const int defaultSignal = SIGTERM;
+   int defaultPosition = 15;
+   unsigned int i;
+   for (i = 0; i < Platform_numberOfSignals; i++) {
+      Panel_set(this, i, (Object*) ListItem_new(Platform_signals[i].name, Platform_signals[i].number));
+      // signal 15 is not always the 15th signal in the table
+      if (Platform_signals[i].number == defaultSignal) {
+         defaultPosition = i;
+      }
+   }
+   #if (defined(SIGRTMIN) && defined(SIGRTMAX))
+   if (SIGRTMAX - SIGRTMIN <= 100) {
+      static char buf[16];
+      for (int sig = SIGRTMIN; sig <= SIGRTMAX; i++, sig++) {
+         int n = sig - SIGRTMIN;
+         xSnprintf(buf, sizeof(buf), "%2d SIGRTMIN%-+3d", sig, n);
+         if (n == 0) {
+            buf[11] = '\0';
+         }
+         Panel_set(this, i, (Object*) ListItem_new(buf, sig));
+      }
+   }
+   #endif
+   Panel_setHeader(this, "XSend signal:");
+   Panel_setSelected(this, defaultPosition);
+   return this;
+}
diff --git a/SmaPanel.h b/SmaPanel.h
new file mode 100644
index 0000000..05e03f1
--- /dev/null
+++ b/SmaPanel.h
@@ -0,0 +1,19 @@
+#ifndef HEADER_SmaPanel
+#define HEADER_SmaPanel
+/*
+htop - SmaPanel.h
+(C) 2004-2011 Hisham H. Muhammad
+Released under the GNU GPLv2, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#include "Panel.h"
+
+typedef struct SmaItem_ {
+   const char* name;
+   int number;
+} SmaItem;
+
+Panel* SmaPanel_new(void);
+
+#endif
diff --git a/linux/Platform.h b/linux/Platform.h
index d87ef55..17e0903 100644
--- a/linux/Platform.h
+++ b/linux/Platform.h
@@ -18,6 +18,7 @@ in the source distribution for its full text.
 #include "Process.h"
 #include "ProcessLocksScreen.h"
 #include "SignalsPanel.h"
+#include "SmaPanel.h"
 
 /* GNU/Hurd does not have PATH_MAX in limits.h */
 #ifndef PATH_MAX
-- 
2.26.2

